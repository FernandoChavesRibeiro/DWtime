document.addEventListener('DOMContentLoaded', function() {
    const getElement = (id) => {
        const el = document.getElementById(id);
        if (!el) console.error(`Elemento #${id} não encontrado`);
        return el;
    };

    const calendarDays = getElement('calendar-days');
    const currentMonthElement = getElement('current-month');
    const prevMonthBtn = getElement('prev-month');
    const nextMonthBtn = getElement('next-month');
    const activitiesList = getElement('activities-list');
    const selectedDateElement = getElement('selected-date');
    const addActivityBtn = getElement('add-activity-btn');
    const activityModal = getElement('activity-modal');
    const closeModalBtn = document.querySelector('.close-btn');
    const cancelActivityBtn = getElement('cancel-activity');
    const activityForm = getElement('activity-form');
    const deleteActivityBtn = getElement('delete-activity');
    const modalTitle = getElement('modal-title');

    if (!calendarDays || !activityForm) {
        console.error('Elementos essenciais não encontrados');
        return;
    }

    let currentDate = new Date();
    currentDate.setHours(0, 0, 0, 0);
    
    let selectedDate = null;
    let activities = [];
    
    try {
        const storedActivities = localStorage.getItem('activities');
        activities = storedActivities ? JSON.parse(storedActivities) : [];
        if (!Array.isArray(activities)) {
            activities = [];
            throw new Error('Dados inválidos no localStorage');
        }
    } catch (e) {
        console.error('Erro ao carregar atividades:', e);
        activities = [];
    }

    let editingActivityId = null;

    const normalizeDate = (date) => {
        const d = new Date(date);
        d.setHours(0, 0, 0, 0);
        return d;
    };

    const isSameDate = (date1, date2) => {
        if (!date1 || !date2) return false;
        return date1.getFullYear() === date2.getFullYear() &&
               date1.getMonth() === date2.getMonth() &&
               date1.getDate() === date2.getDate();
    };

    const renderCalendar = () => {
        if (!calendarDays) return;
        
        calendarDays.innerHTML = '';
        
        const year = currentDate.getFullYear();
        const month = currentDate.getMonth();
        const today = normalizeDate(new Date());
        
        currentMonthElement.textContent = new Date(year, month, 1).toLocaleDateString('pt-BR', {
            month: 'long',
            year: 'numeric'
        }).replace(/^./, (match) => match.toUpperCase());
        
        const firstDayOfMonth = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const daysInLastMonth = new Date(year, month, 0).getDate();
        
        for (let i = firstDayOfMonth - 1; i >= 0; i--) {
            const dayElement = createDayElement(daysInLastMonth - i, true);
            calendarDays.appendChild(dayElement);
        }
        
        for (let i = 1; i <= daysInMonth; i++) {
            const dayDate = normalizeDate(new Date(year, month, i));
            const dayElement = createDayElement(i, false);
            
            if (isSameDate(dayDate, today)) {
                dayElement.classList.add('today');
            }
            
            if (selectedDate && isSameDate(dayDate, selectedDate)) {
                dayElement.classList.add('selected');
            }
            
            const dayActivities = getActivitiesForDate(dayDate);
            if (dayActivities.length > 0) {
                const countElement = document.createElement('div');
                countElement.className = 'activity-count';
                countElement.textContent = dayActivities.length;
                dayElement.appendChild(countElement);
            }
            
            calendarDays.appendChild(dayElement);
        }
        
        const totalDaysShown = firstDayOfMonth + daysInMonth;
        const remainingDays = 7 - (totalDaysShown % 7);
        if (remainingDays < 7) {
            for (let i = 1; i <= remainingDays; i++) {
                const dayElement = createDayElement(i, true);
                calendarDays.appendChild(dayElement);
            }
        }
    };

    const createDayElement = (dayNumber, isOtherMonth) => {
        const dayElement = document.createElement('div');
        dayElement.className = `day ${isOtherMonth ? 'other-month' : ''}`;
        
        const dayNumberElement = document.createElement('div');
        dayNumberElement.className = 'day-number';
        dayNumberElement.textContent = dayNumber;
        dayElement.appendChild(dayNumberElement);
        
        if (!isOtherMonth) {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            const dayDate = normalizeDate(new Date(year, month, dayNumber));
            
            dayElement.addEventListener('click', () => {
                selectedDate = dayDate;
                renderCalendar();
                renderActivitiesList();
                updateSelectedDateDisplay();
            });
        }
        
        return dayElement;
    };

    const goToPreviousMonth = () => {
        currentDate.setMonth(currentDate.getMonth() - 1);
        renderCalendar();
    };
    
    const goToNextMonth = () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        renderCalendar();
    };
    
    const updateSelectedDateDisplay = () => {
        if (selectedDate) {
            selectedDateElement.textContent = selectedDate.toLocaleDateString('pt-BR', {
                weekday: 'long',
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            }).replace(/^./, (match) => match.toUpperCase());
        } else {
            selectedDateElement.textContent = 'Selecione uma data';
        }
    };

    const getActivitiesForDate = (date) => {
        return activities.filter(activity => {
            const activityDate = normalizeDate(new Date(activity.date));
            return isSameDate(activityDate, date);
        }).sort((a, b) => a.time.localeCompare(b.time));
    };
    
    const renderActivitiesList = () => {
        activitiesList.innerHTML = '';
        
        if (!selectedDate) {
            return;
        }
        
        const dayActivities = getActivitiesForDate(selectedDate);
        
        if (dayActivities.length === 0) {
            const emptyMessage = document.createElement('p');
            emptyMessage.textContent = 'Nenhuma atividade para este dia.';
            emptyMessage.style.textAlign = 'center';
            emptyMessage.style.color = '#666';
            activitiesList.appendChild(emptyMessage);
            return;
        }
        
        dayActivities.forEach(activity => {
            const activityItem = document.createElement('div');
            activityItem.className = `activity-item ${activity.priority}-priority`;
            activityItem.innerHTML = `
                <div class="activity-time">${formatTime(activity.time)}</div>
                <div class="activity-title">${activity.title}</div>
                ${activity.description ? `<div class="activity-description">${activity.description}</div>` : ''}
            `;
            activityItem.addEventListener('click', () => editActivity(activity.id));
            activitiesList.appendChild(activityItem);
        });
    };
    
    const formatTime = (timeString) => {
        const [hours, minutes] = timeString.split(':');
        return `${hours}:${minutes}`;
    };
    
    const openAddActivityModal = () => {
        if (!selectedDate) {
            alert('Por favor, selecione uma data primeiro.');
            return;
        }
        
        editingActivityId = null;
        modalTitle.textContent = 'Adicionar Nova Atividade';
        deleteActivityBtn.style.display = 'none';
        
        activityForm.reset();
        document.getElementById('activity-time').value = '08:00';
        
        activityModal.style.display = 'block';
    };
    
    const closeModal = () => {
        activityModal.style.display = 'none';
    };
    
    const editActivity = (activityId) => {
        const activity = activities.find(a => a.id === activityId);
        if (!activity) return;
        
        editingActivityId = activityId;
        modalTitle.textContent = 'Editar Atividade';
        deleteActivityBtn.style.display = 'inline-block';
        
        document.getElementById('activity-id').value = activity.id;
        document.getElementById('activity-title').value = activity.title;
        document.getElementById('activity-time').value = activity.time;
        document.getElementById('activity-description').value = activity.description || '';
        document.getElementById('activity-priority').value = activity.priority;
        
        activityModal.style.display = 'block';
    };
    
    const handleActivityFormSubmit = (e) => {
        e.preventDefault();
        
        if (!selectedDate) {
            alert('Por favor, selecione uma data primeiro.');
            return;
        }
        
        const formData = {
            id: editingActivityId || Date.now().toString(),
            title: document.getElementById('activity-title').value.trim(),
            time: document.getElementById('activity-time').value,
            description: document.getElementById('activity-description').value.trim(),
            priority: document.getElementById('activity-priority').value,
            date: selectedDate.toISOString()
        };
        
        if (!formData.title) {
            alert('Por favor, insira um título para a atividade.');
            return;
        }
        
        if (editingActivityId) {
            const index = activities.findIndex(a => a.id === editingActivityId);
            if (index !== -1) {
                activities[index] = formData;
            }
        } else {
            activities.push(formData);
        }
        
        saveActivities();
        closeModal();
        renderCalendar();
        renderActivitiesList();
    };
    
    const deleteActivity = () => {
        if (!editingActivityId) return;
        
        if (confirm('Tem certeza que deseja excluir esta atividade?')) {
            activities = activities.filter(a => a.id !== editingActivityId);
            saveActivities();
            closeModal();
            renderCalendar();
            renderActivitiesList();
        }
    };
    
    const saveActivities = () => {
        localStorage.setItem('activities', JSON.stringify(activities));
    };

    try {
        renderCalendar();
        updateSelectedDateDisplay();
        
        if (prevMonthBtn) prevMonthBtn.addEventListener('click', goToPreviousMonth);
        if (nextMonthBtn) nextMonthBtn.addEventListener('click', goToNextMonth);
        if (addActivityBtn) addActivityBtn.addEventListener('click', openAddActivityModal);
        if (closeModalBtn) closeModalBtn.addEventListener('click', closeModal);
        if (cancelActivityBtn) cancelActivityBtn.addEventListener('click', closeModal);
        if (activityForm) activityForm.addEventListener('submit', handleActivityFormSubmit);
        if (deleteActivityBtn) deleteActivityBtn.addEventListener('click', deleteActivity);
        
        window.addEventListener('click', (e) => {
            if (e.target === activityModal) {
                closeModal();
            }
        });
    } catch (e) {
        console.error('Erro na inicialização:', e);
    }
});
